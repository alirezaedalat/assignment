{
	"info": {
		"_postman_id": "08dd778a-2174-4a9e-a95d-d0ad1d806a85",
		"name": "assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8218666"
	},
	"item": [
		{
			"name": "search_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Search for the user with username “Delphine”",
							"",
							"",
							"//Test status code ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"//Test code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"// Body matches string validations for id",
							"",
							"pm.test(\"Body matches id\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"// Body matches string validations for name",
							"",
							"pm.test(\"Body matches name\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"name\");",
							"});",
							"",
							"// Body matches string validations for username",
							"",
							"pm.test(\"Body matches  Delphine \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"username\");",
							"});",
							"",
							"// Body matches string validations for email",
							"",
							"pm.test(\"Body matches  email \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"email\");",
							"});",
							"",
							"// Body matches string validations for address",
							"",
							"pm.test(\"Body matches  address \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"address\");",
							"});",
							"",
							"// Body matches string validations for street",
							"",
							"pm.test(\"Body matches  street \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"street\");",
							"});",
							"",
							"// Body matches string validations for suite",
							"",
							"pm.test(\"Body matches  suite \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"suite\");",
							"});",
							"",
							"// Body matches string validations for city",
							"",
							"pm.test(\"Body matches  city \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"city\");",
							"});",
							"",
							"// Body matches string validations for zipcode",
							"",
							"pm.test(\"Body matches  zipcode \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"zipcode\");",
							"});",
							"",
							"// Body matches string validations for geo",
							"",
							"pm.test(\"Body matches  geo \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"geo\");",
							"});",
							"",
							"// Body matches string validations for lat",
							"",
							"pm.test(\"Body matches  lat \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"lat\");",
							"});",
							"",
							"// Body matches string validations for lng",
							"",
							"pm.test(\"Body matches  lng \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"lng\");",
							"});",
							"",
							"// Body matches string validations for phone",
							"",
							"pm.test(\"Body matches  phone \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"phone\");",
							"});",
							"",
							"",
							"// Body matches string validations for website",
							"",
							"pm.test(\"Body matches  website \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"website\");",
							"});",
							"",
							"// Body matches string validations for company",
							"",
							"pm.test(\"Body matches  company \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"company\");",
							"});",
							"",
							"// Body matches string validations for company name",
							"",
							"pm.test(\"Body matches  name \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"name\");",
							"});",
							"",
							"// Body matches string validations for company catchPhrase",
							"",
							"pm.test(\"Body matches  catchPhrase \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"catchPhrase\");",
							"});",
							"",
							"// Body matches string validations for company bs",
							"",
							"pm.test(\"Body matches  bs \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"bs\");",
							"});",
							"",
							"",
							"//Test id",
							"",
							"pm.test(\" Test id\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.be.not.null;",
							"});",
							"",
							"//Test name",
							"",
							"pm.test(\" Test name\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.be.not.null;",
							"});",
							"",
							"",
							"//Test username",
							"",
							"pm.test(\" Test username\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"username\"));",
							"});",
							"",
							"//Test street",
							"",
							"pm.test(\" Test street\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].address.street).to.be.not.null;",
							"});",
							"",
							"",
							"//Test suite",
							"",
							" pm.test(\" Test suite\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].address.suite).to.be.not.null;",
							"});",
							"",
							"//Test city",
							"",
							" pm.test(\" Test city\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].address.city).to.be.not.null;",
							"});",
							"",
							"//Test zipcode",
							"",
							" pm.test(\" Test zipcode\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].address.zipcode).to.be.not.null;",
							"});",
							"",
							"//Test lat",
							"",
							" pm.test(\" Test lat\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].address.geo.lat).to.be.not.null;",
							"});",
							"",
							"//Test lngs",
							"",
							" pm.test(\" Test lng\", function () {",
							"    let jsonData = pm.response.json();",
							"        pm.expect(jsonData[0].address.geo.lng).to.be.not.null;",
							"});",
							"",
							"//Test phone",
							"",
							"pm.test(\" Test phone\", function () {",
							"    let jsonData = pm.response.json();",
							"        pm.expect(jsonData.phone).to.be.not.null;",
							"});",
							"",
							"// Test website",
							"",
							"pm.test(\" Test website\", function () {",
							"    let jsonData = pm.response.json();",
							"        pm.expect(jsonData.website).to.be.not.null;",
							"});",
							"",
							"//Test name of company",
							"",
							"pm.test(\" Test name of company\", function () {",
							"    let jsonData = pm.response.json();",
							"        pm.expect(jsonData[0].company.name).to.be.not.null;",
							"});",
							"",
							"//Test catchPhrase of company",
							"",
							"pm.test(\" Test catchPhrase of company\", function () {",
							"    let jsonData = pm.response.json();",
							"        pm.expect(jsonData[0].company.catchPhrase).to.be.not.null;",
							"});",
							"",
							"",
							"//Test catchPhrase of company",
							"",
							"pm.test(\" Test catchPhrase of company\", function () {",
							"    let jsonData = pm.response.json();",
							"        pm.expect(jsonData[0].company.catchPhrase).to.be.not.null;",
							"});",
							"",
							"//Test bs of company",
							"",
							"pm.test(\" Test bs of company\", function () {",
							"    let jsonData = pm.response.json();",
							"        pm.expect(jsonData[0].company.bs).to.be.not.null;",
							"});",
							"",
							"",
							"// get username id from reposene --- username = “Delphine”",
							"",
							"var jsonData = pm.response.json();",
							"    pm.environment.set(\"usernameId\", jsonData[0].id);",
							"",
							"//  get username email from reposene --- username = “Delphine”",
							"",
							"var jsonData = pm.response.json();",
							"    pm.environment.set(\"usernameEmail\", jsonData[0].email);",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//set environment for username ",
							"",
							"let username = \"Delphine\";",
							"    pm.collectionVariables.set(\"username\",username);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users?username={{username}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "username",
							"value": "{{username}}"
						}
					]
				},
				"description": "Search for the user with username “Delphine”."
			},
			"response": []
		},
		{
			"name": "Details_fetched_posts_by_the_user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Use the details fetched to make a search for the posts written by the",
							"//user.",
							"",
							"//get username  environment",
							"",
							"pm.environment.get(\"usernameId\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test status code",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test Status code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"//Test  userId",
							"",
							"pm.test(\" Test userId\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4,5,6,8,9].userId).to.eql(pm.environment.get(\"usernameId\"));",
							"});",
							"",
							"//Test  id",
							"",
							"pm.test(\" Test id\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4,5,6,8,9].userId).to.be.not.null;",
							"});",
							"",
							"//Test  title",
							"",
							"pm.test(\" Test title\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4,5,6,8,9].title).to.be.not.null;",
							"});",
							"",
							"//Test  body",
							"",
							"pm.test(\" Test body\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4,5,6,8,9].body).to.be.not.null;",
							"});",
							"",
							"",
							"//get psotId from response ",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"postId\",(jsonData.map((data)=>{",
							"   return (data.id)",
							"",
							"})));",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts?userId={{usernameId}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{usernameId}}"
						}
					]
				},
				"description": "Use the details fetched to make a search for the posts written by the\nuser."
			},
			"response": []
		},
		{
			"name": "post_fetch_comments_postid_81",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fetch the comments and validate if the emails in the",
							"//comment section",
							"",
							"//Test status code",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test Status code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"",
							"//Test  postId",
							"",
							"pm.test(\" Test postId\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4].postId).to.be.not.null;",
							"});",
							"",
							"",
							"//validate an email id",
							"",
							"function ValidateEmail(mail) ",
							"{",
							" if (/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)$/.test(mail))",
							"  {",
							"    return (true)",
							"  }",
							"    ",
							"    return (false)",
							"}",
							"",
							"//get  all email  from the response",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"email\",(jsonData.map((data)=>{",
							"   return (data.email)",
							"",
							"})));",
							"",
							"",
							"//set environment for ValidateEmail",
							"",
							"let validateemail = ValidateEmail(pm.environment.get(\"email\")[0,1,2,3])",
							"pm.environment.set(\"validateemail\", validateemail);",
							"",
							"//fetch the comments and validate if the emails in the",
							"//comment section are in the proper format.",
							"",
							"pm.test(\"Test email the proper format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.environment.get(\"validateemail\")).to.eql(true);",
							"    pm.expect(jsonData[0].email).to.eql(pm.environment.get(\"email\")[0]);",
							"    pm.expect(jsonData[1].email).to.eql(pm.environment.get(\"email\")[1]);",
							"    pm.expect(jsonData[2].email).to.eql(pm.environment.get(\"email\")[2]);",
							"    pm.expect(jsonData[3].email).to.eql(pm.environment.get(\"email\")[3]);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//get postId from posts",
							"",
							"let postId_81 = (pm.environment.get(\"postId\")[0]);",
							"    pm.environment.set(\"postId_81\",postId_81);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId={{postId_81}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{postId_81}}"
						}
					]
				},
				"description": "For 81 postID, fetch the comments and validate if the emails in the\ncomment section are in the proper format.\n"
			},
			"response": []
		},
		{
			"name": "post_fetch_comments_postid_82",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fetch the comments and validate if the emails in the",
							"//comment section",
							"",
							"//Test status code",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test Status code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"",
							"//Test  postId",
							"",
							"pm.test(\" Test postId\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4].postId).to.be.not.null;",
							"});",
							"",
							"",
							"//validate an email id",
							"",
							"function ValidateEmail(mail) ",
							"{",
							" if (/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)$/.test(mail))",
							"  {",
							"    return (true)",
							"  }",
							"    ",
							"    return (false)",
							"}",
							"",
							"//get  all email  from the response",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"email\",(jsonData.map((data)=>{",
							"   return (data.email)",
							"",
							"})));",
							"",
							"",
							"//set environment for ValidateEmail",
							"",
							"let validateemail = ValidateEmail(pm.environment.get(\"email\")[0,1,2,3,4])",
							"pm.environment.set(\"validateemail\", validateemail);",
							"",
							"//fetch the comments and validate if the emails in the",
							"//comment section are in the proper format.",
							"",
							"pm.test(\"Test email the proper format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.environment.get(\"validateemail\")).to.eql(true);",
							"    pm.expect(jsonData[0].email).to.eql(pm.environment.get(\"email\")[0]);",
							"    pm.expect(jsonData[1].email).to.eql(pm.environment.get(\"email\")[1]);",
							"    pm.expect(jsonData[2].email).to.eql(pm.environment.get(\"email\")[2]);",
							"    pm.expect(jsonData[3].email).to.eql(pm.environment.get(\"email\")[3]);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//get postId from posts",
							"",
							"let postId_82 = (pm.environment.get(\"postId\")[1]);",
							"    pm.environment.set(\"postId_82\",postId_82);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId={{postId_82}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{postId_82}}"
						}
					]
				},
				"description": "For 82 postID, fetch the comments and validate if the emails in the\ncomment section are in the proper format.\n"
			},
			"response": []
		},
		{
			"name": "post_fetch_comments_postid_83",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fetch the comments and validate if the emails in the",
							"//comment section",
							"",
							"//Test status code",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test Status code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"",
							"//Test  postId",
							"",
							"pm.test(\" Test postId\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4].postId).to.be.not.null;",
							"});",
							"",
							"",
							"//validate an email id",
							"",
							"function ValidateEmail(mail) ",
							"{",
							" if (/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)$/.test(mail))",
							"  {",
							"    return (true)",
							"  }",
							"    ",
							"    return (false)",
							"}",
							"",
							"//get  all email  from the response",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"email\",(jsonData.map((data)=>{",
							"   return (data.email)",
							"",
							"})));",
							"",
							"",
							"//set environment for ValidateEmail",
							"",
							"let validateemail = ValidateEmail(pm.environment.get(\"email\")[0,1,2,3])",
							"pm.environment.set(\"validateemail\", validateemail);",
							"",
							"//fetch the comments and validate if the emails in the",
							"//comment section are in the proper format.",
							"",
							"pm.test(\"Test email the proper format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.environment.get(\"validateemail\")).to.eql(true);",
							"    pm.expect(jsonData[0].email).to.eql(pm.environment.get(\"email\")[0]);",
							"    pm.expect(jsonData[1].email).to.eql(pm.environment.get(\"email\")[1]);",
							"    pm.expect(jsonData[2].email).to.eql(pm.environment.get(\"email\")[2]);",
							"    pm.expect(jsonData[3].email).to.eql(pm.environment.get(\"email\")[3]);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//get postId from posts",
							"",
							"let postId_83 = (pm.environment.get(\"postId\")[2]);",
							"    pm.environment.set(\"postId_83\",postId_83);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId={{postId_83}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{postId_83}}"
						}
					]
				},
				"description": "For 83 postID, fetch the comments and validate if the emails in the\ncomment section are in the proper format.\n"
			},
			"response": []
		},
		{
			"name": "post_fetch_comments_postid_84",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fetch the comments and validate if the emails in the",
							"//comment section",
							"",
							"//Test status code",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test Status code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"",
							"//Test  postId",
							"",
							"pm.test(\" Test postId\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4].postId).to.be.not.null;",
							"});",
							"",
							"",
							"//validate an email id",
							"",
							"function ValidateEmail(mail) ",
							"{",
							" if (/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)$/.test(mail))",
							"  {",
							"    return (true)",
							"  }",
							"    ",
							"    return (false)",
							"}",
							"",
							"//get  all email  from the response",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"email\",(jsonData.map((data)=>{",
							"   return (data.email)",
							"",
							"})));",
							"",
							"",
							"//set environment for ValidateEmail",
							"",
							"let validateemail = ValidateEmail(pm.environment.get(\"email\")[0,1,2,3])",
							"pm.environment.set(\"validateemail\", validateemail);",
							"",
							"//fetch the comments and validate if the emails in the",
							"//comment section are in the proper format.",
							"",
							"pm.test(\"Test email the proper format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.environment.get(\"validateemail\")).to.eql(true);",
							"    pm.expect(jsonData[0].email).to.eql(pm.environment.get(\"email\")[0]);",
							"    pm.expect(jsonData[1].email).to.eql(pm.environment.get(\"email\")[1]);",
							"    pm.expect(jsonData[2].email).to.eql(pm.environment.get(\"email\")[2]);",
							"    pm.expect(jsonData[3].email).to.eql(pm.environment.get(\"email\")[3]);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//get postId from posts",
							"",
							"let postId_84 = (pm.environment.get(\"postId\")[3]);",
							"    pm.environment.set(\"postId_84\",postId_84);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId={{postId_84}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{postId_84}}"
						}
					]
				},
				"description": "For 84 postID, fetch the comments and validate if the emails in the\ncomment section are in the proper format.\n"
			},
			"response": []
		},
		{
			"name": "post_fetch_comments_postid_85",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fetch the comments and validate if the emails in the",
							"//comment section",
							"",
							"//Test status code",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test Status code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"",
							"//Test  postId",
							"",
							"pm.test(\" Test postId\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4].postId).to.be.not.null;",
							"});",
							"",
							"",
							"//validate an email id",
							"",
							"function ValidateEmail(mail) ",
							"{",
							" if (/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)$/.test(mail))",
							"  {",
							"    return (true)",
							"  }",
							"    ",
							"    return (false)",
							"}",
							"",
							"//get  all email  from the response",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"email\",(jsonData.map((data)=>{",
							"   return (data.email)",
							"",
							"})));",
							"",
							"",
							"//set environment for ValidateEmail",
							"",
							"let validateemail = ValidateEmail(pm.environment.get(\"email\")[0,1,2,3])",
							"pm.environment.set(\"validateemail\", validateemail);",
							"",
							"//fetch the comments and validate if the emails in the",
							"//comment section are in the proper format.",
							"",
							"pm.test(\"Test email the proper format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.environment.get(\"validateemail\")).to.eql(true);",
							"    pm.expect(jsonData[0].email).to.eql(pm.environment.get(\"email\")[0]);",
							"    pm.expect(jsonData[1].email).to.eql(pm.environment.get(\"email\")[1]);",
							"    pm.expect(jsonData[2].email).to.eql(pm.environment.get(\"email\")[2]);",
							"    pm.expect(jsonData[3].email).to.eql(pm.environment.get(\"email\")[3]);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//get postId from posts",
							"",
							"let postId_85 = (pm.environment.get(\"postId\")[4]);",
							"    pm.environment.set(\"postId_85\",postId_85);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId={{postId_85}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{postId_85}}"
						}
					]
				},
				"description": "For 85 postID, fetch the comments and validate if the emails in the\ncomment section are in the proper format.\n"
			},
			"response": []
		},
		{
			"name": "post_fetch_comments_postid_86",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fetch the comments and validate if the emails in the",
							"//comment section",
							"",
							"//Test status code",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test Status code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"",
							"//Test  postId",
							"",
							"pm.test(\" Test postId\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4].postId).to.be.not.null;",
							"});",
							"",
							"//validate an email id",
							"",
							"function ValidateEmail(mail) ",
							"{",
							" if (/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)$/.test(mail))",
							"  {",
							"    return (true)",
							"  }",
							"    ",
							"    return (false)",
							"}",
							"",
							"//get  all email  from the response",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"email\",(jsonData.map((data)=>{",
							"   return (data.email)",
							"",
							"})));",
							"",
							"",
							"//set environment for ValidateEmail",
							"",
							"let validateemail = ValidateEmail(pm.environment.get(\"email\")[0,1,2,3])",
							"pm.environment.set(\"validateemail\", validateemail);",
							"",
							"//fetch the comments and validate if the emails in the",
							"//comment section are in the proper format.",
							"",
							"pm.test(\"Test email the proper format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.environment.get(\"validateemail\")).to.eql(true);",
							"    pm.expect(jsonData[0].email).to.eql(pm.environment.get(\"email\")[0]);",
							"    pm.expect(jsonData[1].email).to.eql(pm.environment.get(\"email\")[1]);",
							"    pm.expect(jsonData[2].email).to.eql(pm.environment.get(\"email\")[2]);",
							"    pm.expect(jsonData[3].email).to.eql(pm.environment.get(\"email\")[3]);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//get postId from posts",
							"",
							"let postId_86 = (pm.environment.get(\"postId\")[5]);",
							"    pm.environment.set(\"postId_86\",postId_86);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId={{postId_86}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{postId_86}}"
						}
					]
				},
				"description": "For 86 postID, fetch the comments and validate if the emails in the\ncomment section are in the proper format.\n"
			},
			"response": []
		},
		{
			"name": "post_fetch_comments_postid_87",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fetch the comments and validate if the emails in the",
							"//comment section",
							"",
							"//Test status code",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test Status code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"",
							"//Test  postId",
							"",
							"pm.test(\" Test postId\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4].postId).to.be.not.null;",
							"});",
							"",
							"//validate an email id",
							"",
							"function ValidateEmail(mail) ",
							"{",
							" if (/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)$/.test(mail))",
							"  {",
							"    return (true)",
							"  }",
							"    ",
							"    return (false)",
							"}",
							"",
							"//get  all email  from the response",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"email\",(jsonData.map((data)=>{",
							"   return (data.email)",
							"",
							"})));",
							"",
							"",
							"//set environment for ValidateEmail",
							"",
							"let validateemail = ValidateEmail(pm.environment.get(\"email\")[0,1,2,3])",
							"pm.environment.set(\"validateemail\", validateemail);",
							"",
							"//fetch the comments and validate if the emails in the",
							"//comment section are in the proper format.",
							"",
							"pm.test(\"Test email the proper format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.environment.get(\"validateemail\")).to.eql(true);",
							"    pm.expect(jsonData[0].email).to.eql(pm.environment.get(\"email\")[0]);",
							"    pm.expect(jsonData[1].email).to.eql(pm.environment.get(\"email\")[1]);",
							"    pm.expect(jsonData[2].email).to.eql(pm.environment.get(\"email\")[2]);",
							"    pm.expect(jsonData[3].email).to.eql(pm.environment.get(\"email\")[3]);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//get postId from posts",
							"",
							"let postId_87 = (pm.environment.get(\"postId\")[6]);",
							"    pm.environment.set(\"postId_87\",postId_87);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId={{postId_87}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{postId_87}}"
						}
					]
				},
				"description": "For 87 postID, fetch the comments and validate if the emails in the\ncomment section are in the proper format.\n"
			},
			"response": []
		},
		{
			"name": "post_fetch_comments_postid_88",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fetch the comments and validate if the emails in the",
							"//comment section",
							"",
							"//Test status code",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test Status code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"",
							"//Test  postId",
							"",
							"pm.test(\" Test postId\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4].postId).to.be.not.null;",
							"});",
							"",
							"//validate an email id",
							"",
							"function ValidateEmail(mail) ",
							"{",
							" if (/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)$/.test(mail))",
							"  {",
							"    return (true)",
							"  }",
							"    ",
							"    return (false)",
							"}",
							"",
							"//get  all email  from the response",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"email\",(jsonData.map((data)=>{",
							"   return (data.email)",
							"",
							"})));",
							"",
							"",
							"//set environment for ValidateEmail",
							"",
							"let validateemail = ValidateEmail(pm.environment.get(\"email\")[0,1,2,3])",
							"pm.environment.set(\"validateemail\", validateemail);",
							"",
							"//fetch the comments and validate if the emails in the",
							"//comment section are in the proper format.",
							"",
							"pm.test(\"Test email the proper format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.environment.get(\"validateemail\")).to.eql(true);",
							"    pm.expect(jsonData[0].email).to.eql(pm.environment.get(\"email\")[0]);",
							"    pm.expect(jsonData[1].email).to.eql(pm.environment.get(\"email\")[1]);",
							"    pm.expect(jsonData[2].email).to.eql(pm.environment.get(\"email\")[2]);",
							"    pm.expect(jsonData[3].email).to.eql(pm.environment.get(\"email\")[3]);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//get postId from posts",
							"",
							"let postId_88 = (pm.environment.get(\"postId\")[7]);",
							"    pm.environment.set(\"postId_88\",postId_88);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId={{postId_88}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{postId_88}}"
						}
					]
				},
				"description": "For 88 postID, fetch the comments and validate if the emails in the\ncomment section are in the proper format.\n"
			},
			"response": []
		},
		{
			"name": "post_fetch_comments_postid_89",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fetch the comments and validate if the emails in the",
							"//comment section",
							"",
							"//Test status code",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test Status code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"",
							"//Test  postId",
							"",
							"pm.test(\" Test postId\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4].postId).to.be.not.null;",
							"});",
							"",
							"//validate an email id",
							"",
							"function ValidateEmail(mail) ",
							"{",
							" if (/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)$/.test(mail))",
							"  {",
							"    return (true)",
							"  }",
							"    ",
							"    return (false)",
							"}",
							"",
							"//get  all email  from the response",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"email\",(jsonData.map((data)=>{",
							"   return (data.email)",
							"",
							"})));",
							"",
							"",
							"//set environment for ValidateEmail",
							"",
							"let validateemail = ValidateEmail(pm.environment.get(\"email\")[0,1,2,3])",
							"pm.environment.set(\"validateemail\", validateemail);",
							"",
							"//fetch the comments and validate if the emails in the",
							"//comment section are in the proper format.",
							"",
							"pm.test(\"Test email the proper format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.environment.get(\"validateemail\")).to.eql(true);",
							"    pm.expect(jsonData[0].email).to.eql(pm.environment.get(\"email\")[0]);",
							"    pm.expect(jsonData[1].email).to.eql(pm.environment.get(\"email\")[1]);",
							"    pm.expect(jsonData[2].email).to.eql(pm.environment.get(\"email\")[2]);",
							"    pm.expect(jsonData[3].email).to.eql(pm.environment.get(\"email\")[3]);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//get postId from posts",
							"",
							"let postId_89 = (pm.environment.get(\"postId\")[8]);",
							"    pm.environment.set(\"postId_89\",postId_89);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId={{postId_89}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{postId_89}}"
						}
					]
				},
				"description": "For 89 postID, fetch the comments and validate if the emails in the\ncomment section are in the proper format.\n"
			},
			"response": []
		},
		{
			"name": "post_fetch_comments_postid_90",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fetch the comments and validate if the emails in the",
							"//comment section",
							"",
							"//Test status code",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test Status code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"",
							"//Test  postId",
							"",
							"pm.test(\" Test postId\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0,1,2,3,4].postId).to.be.not.null;",
							"});",
							"",
							"//validate an email id",
							"",
							"function ValidateEmail(mail) ",
							"{",
							" if (/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)$/.test(mail))",
							"  {",
							"    return (true)",
							"  }",
							"    ",
							"    return (false)",
							"}",
							"",
							"//get  all email  from the response",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"email\",(jsonData.map((data)=>{",
							"   return (data.email)",
							"",
							"})));",
							"",
							"",
							"//set environment for ValidateEmail",
							"",
							"let validateemail = ValidateEmail(pm.environment.get(\"email\")[0,1,2,3])",
							"pm.environment.set(\"validateemail\", validateemail);",
							"",
							"//fetch the comments and validate if the emails in the",
							"//comment section are in the proper format.",
							"",
							"pm.test(\"Test email the proper format \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.environment.get(\"validateemail\")).to.eql(true);",
							"    pm.expect(jsonData[0].email).to.eql(pm.environment.get(\"email\")[0]);",
							"    pm.expect(jsonData[1].email).to.eql(pm.environment.get(\"email\")[1]);",
							"    pm.expect(jsonData[2].email).to.eql(pm.environment.get(\"email\")[2]);",
							"    pm.expect(jsonData[3].email).to.eql(pm.environment.get(\"email\")[3]);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//get postId from posts",
							"",
							"let postId_90 = (pm.environment.get(\"postId\")[9]);",
							"    pm.environment.set(\"postId_90\",postId_90);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId={{postId_90}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{postId_90}}"
						}
					]
				},
				"description": "For 90 postID, fetch the comments and validate if the emails in the\ncomment section are in the proper format.\n"
			},
			"response": []
		},
		{
			"name": "search_invalid _username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Search for the user with invalid username ",
							"",
							"",
							"//Test status code ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"//Test code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"  ",
							"});",
							"",
							"// should not have data",
							"",
							"pm.test(\"Body matches no data\", function () {",
							"    pm.expect(pm.response.text()).to.include([]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//set environment for invalid username ",
							"",
							"let invalid_username = \"1\";",
							"pm.collectionVariables.set(\"invalid_username\",invalid_username);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users?username={{invalid_username}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "username",
							"value": "{{invalid_username}}"
						}
					]
				},
				"description": "Think of various scenarios for the test workflow, all the things that\ncan go wrong. Add them to test coverage\n\nsearch by invalid username"
			},
			"response": []
		},
		{
			"name": "Details_fetched_posts_by_the_invalid_username",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Use the details fetched to make a search for the posts written by the",
							"// invalid usernameId.",
							"",
							"//set invalid usernameId  environment",
							"",
							"var invalid_usernameId = \"Test\";",
							"    pm.environment.set(\"invalid_usernameId\",invalid_usernameId);",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Search for the user with username “Delphine”",
							"",
							"",
							"//Test status code ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"//Test code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"  ",
							"});",
							"",
							"// should not have data",
							"",
							"pm.test(\"Body matches no data\", function () {",
							"    pm.expect(pm.response.text()).to.include([]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts?userId={{invalid_usernameId}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{invalid_usernameId}}"
						}
					]
				},
				"description": "Think of various scenarios for the test workflow, all the things that\ncan go wrong. Add them to test coverage\n\nsearch by invalid usernameId"
			},
			"response": []
		},
		{
			"name": "post_fetch_comments_invalid_postid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Use the details fetched to make a search for the invalid posts written by the user.",
							"",
							"",
							"//Test status code ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"//Test code name has string",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status('OK');",
							"});",
							"",
							"//response must be valid and have a body",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"  ",
							"});",
							"",
							"// should not have data",
							"",
							"pm.test(\"Body matches no data\", function () {",
							"    pm.expect(pm.response.text()).to.include([]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//set invalid postId environment",
							"",
							"let invalid_postId =  \"Test\";",
							"    pm.environment.set(\"invalid_postId\",invalid_postId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId={{invalid_postId}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{invalid_postId}}"
						}
					]
				},
				"description": "Think of various scenarios for the test workflow, all the things that\ncan go wrong. Add them to test coverage.\n\nUse the details fetched to make a search for the invalid posts written by the user."
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "invalid_username",
			"value": ""
		}
	]
}